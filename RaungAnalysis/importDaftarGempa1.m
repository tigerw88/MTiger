function [DAFTAR, daftar] = importDaftarGempa(filename, year, month, startRow, endRow)
%IMPORTDAFTARGEMPA Imports PVBMBG's wonky Excel formatted earthquake catalogs into something useable

%% KNOWN ISSUES:
%
% FIXED
% Most of the hours are written as 'HH.MM.SS', but sometimes they come as
% 'MM.SS' with spaces taking up the places for the hours so that it looks
% inline in Microsoft Excel. In the case where the hours are missing, they
% always assume the hours of the previous events, but there is no rhyme or
% reason to why the hours are sometimes missing. Sometimes, the hours are
% listed for every event, sometimes for only the first event in the hours,
% sometimes for the first several events in an hour before the hours are
% dropped from the syntax.
%
% It looks like that in the cases above, it screws up the row assignments.
%

% This is the auto-generated help. No longer valid
%   [TANGGAL,VARNAME2,NOMOR,VARNAME4,JAM,GERAK_AWAL,AMPL_MM,S_P,LAMA,FREQ,MD,ENERGI,KETERANGAN]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [TANGGAL,VARNAME2,NOMOR,VARNAME4,JAM,GERAK_AWAL,AMPL_MM,S_P,LAMA,FREQ,MD,ENERGI,KETERANGAN]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [Tanggal,VarName2,Nomor,VarName4,Jam,Gerak_Awal,Ampl_mm,S_P,Lama,Freq,Md,Energi,Keterangan] = importfile('Daftar Gempa Mei 2011.csv',1, 1150);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/04/01 22:00:34

%% Initialize variables.
delimiter = ',';
if nargin<=3
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[4,7,9,11,12]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [4,7,9,11,12]);
rawCellColumns = raw(:, [1,2,3,5,6,8,10,13]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names

Tanggal_str = rawCellColumns(:, 1); % raw reading of column with date - may contain non-date info in header lines
VarName2 = rawCellColumns(:, 2);
Nomor1 = rawCellColumns(:, 3);
Nomor2 = cell2mat(rawNumericColumns(:, 1)); % an enumerated id number or nan
Jam = rawCellColumns(:, 4);
Gerak_Awal = rawCellColumns(:, 5);
Ampl_mm = cell2mat(rawNumericColumns(:, 2));
S_P = rawCellColumns(:, 6);
Lama = cell2mat(rawNumericColumns(:, 3));
Freq = rawCellColumns(:, 7);
Md = cell2mat(rawNumericColumns(:, 4));
Energi = cell2mat(rawNumericColumns(:, 5));
Keterangan = rawCellColumns(:, 8);

%% Process raw data

% Tanggal
Tanggal = str2double(Tanggal_str); % converts strings to doubles; effectively removes info in header lines bc non-numeric values get returned as NaN


%%

IEQ = ~isnan(Nomor2); % Index of rows that do have EarthQuakes

    % Fill in mising date information, append time
I = find(~isnan(Tanggal));
I = [I; numel(Tanggal)+1];
for n = 1:numel(I)-1, Tanggal(I(n):I(n+1)-1) = Tanggal(I(n)); end;

year_vec = repmat(year, size(Tanggal)); month_vec = repmat(month, size(Tanggal)); % create vectors for year and month to match date
daftar.date_num = datenum( year_vec(IEQ), month_vec(IEQ), Tanggal(IEQ)); % create datenum


Jam2 = Jam(IEQ);

%% Fix HH.MM.SS syntax
% First remove all '.'s from syntax and convert instances of 'MMSS' to 'HHMMSS'
% If a line is missing the HH, append the previous times HH to the string.

% what happens if the first item is 'MM.SS'

% remove all '.'s from the syntax. E.g., 'HH.MM.SS' becomes 'HHMMSS'.
% this is for the cases where the observer forgot the proper syntax
Jam2 = strrep(Jam2, '.', ''); 

for j = 1:numel(Jam2)

    if numel(Jam2{j}) < 6; % assume the HH are missing; 6 bc there are 6 chars in 'HHMMSS'
        
        if j ~= 1;
            appendix = Jam2{j-1}(1:2); % append the 'HH' of the previous time
        else
            appendix = '00'; % append '00'
        end
        Jam2{j} = [appendix Jam2{j}];
        
    elseif numel(Jam2{j}) < 4; % assume the 'HHMM' are missing; 4 bc there are 4 chars in 'MMSS'
        
        if j~= 1;
            appendix = Jam2{j-1}(1:4); % append the 'HH.MM.' of the previous time
        else
            appendix = '0000.';
        end
        Jam2{j} = [appendix Jam2{j}];
        
    end

end

%%

for n = 1:numel(daftar.date_num)
    
    tmp_datestr = datestr(daftar.date_num(n));
    date_str = [tmp_datestr ' ' Jam2{n}];
    daftar.date_num(n) = datenum(date_str, 'dd-mmm-yyyy HHMMSS'); % remember, the time syntax has been changed from the original HH.MM.SS to HHMMSS
    daftar.date_vec(n,:) = datevec(daftar.date_num(n));
    daftar.date_str{n} = datestr(daftar.date_num(n));
    
end

    %
daftar.Lama = Lama(IEQ);
daftar.Md = Md(IEQ);
daftar.Energi = Energi(IEQ);
daftar.Keterangan = Keterangan(IEQ);

%% Convert to Matlab Table

DAFTAR = table(daftar.date_num, daftar.date_str', daftar.Lama, daftar.Md, daftar.Energi, daftar.Keterangan, ...
    'VariableNames',{'Date_Num' 'Date_Str' 'Lama' 'Md' 'Energi' 'Keterangan'});


