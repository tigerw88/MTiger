function Teqs = importDaftarGempa( filename, year, month )
%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/jaywellik/Dropbox/indonesia2016_raung/PosRaungDaftarGempa/Daftar Gempa G.Raung Bulan Mei 2015.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/04/11 11:04:04

%% Initialize variables.
% filename = '/Users/jaywellik/Dropbox/indonesia2016_raung/PosRaungDaftarGempa/Daftar Gempa G.Raung Bulan Mei 2015.csv';
% filename = '/Users/jaywellik/Dropbox/indonesia2016_raung/PosRaungDaftarGempa/Daftar Gempa Mei 2011.csv';
% year = 2011; month = 5;
delimiter = ',';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% Converts strings in the input cell array to numbers. Replaced non-numeric
% strings with NaN.
rawData = dataArray{4};
for row=1:size(rawData, 1);
    % Create a regular expression to detect and remove non-numeric prefixes and
    % suffixes.
    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
    try
        result = regexp(rawData{row}, regexstr, 'names');
        numbers = result.numbers;
        
        % Detected commas in non-thousand locations.
        invalidThousandsSeparator = false;
        if any(numbers==',');
            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
            if isempty(regexp(thousandsRegExp, ',', 'once'));
                numbers = NaN;
                invalidThousandsSeparator = true;
            end
        end
        % Convert numeric strings to numbers.
        if ~invalidThousandsSeparator;
            numbers = textscan(strrep(numbers, ',', ''), '%f');
            numericData(row, 4) = numbers{1};
            raw{row, 4} = numbers{1};
        end
    catch me
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, 4);
rawCellColumns = raw(:, [1,2,3,5,6,7,8,9,10,11,12,13]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
Day = rawCellColumns(:, 1);
VarName2 = rawCellColumns(:, 2);
VarName3 = rawCellColumns(:, 3);
isEQ = cell2mat(rawNumericColumns(:, 1));
TimeStamp = rawCellColumns(:, 4);
VarName6 = rawCellColumns(:, 5);
S_P = str2double(rawCellColumns(:, 6));
VarName8 = rawCellColumns(:, 7);
Duration = str2double(rawCellColumns(:, 8));
Freq_Hz = rawCellColumns(:, 9);
Mag = str2double(rawCellColumns(:, 10));
Energy = str2double(rawCellColumns(:, 11));
Type = rawCellColumns(:, 12);

%% Create Initial Table

Tall_entries = table(isEQ, Day, TimeStamp, S_P, Duration, Mag, Energy, Type);
Teqs = Tall_entries(~isnan(Tall_entries.isEQ), :); % extract new table with only earthquakes

%% Try to Parse Year and Month

% monthyearline = Freq_Hz(3)
% % monthyearline = strrep(monthyearline, ' ', '')
% monthyearcell = strsplit(monthyearline{:},':')
% monthyear = monthyearcell(2);
% monthyearcell = strsplit(monthyear{:}, ' ')
% yearcell = monthyearcell(3)
% year = str2num(yearcell{:})
% monthcell = monthyearcell(2)
% monthstr = monthcell{:};

% switch monthstr
%     case {'Jan' 'Januari'}        
%         month = 1;
%     case {'Feb' 'Februari' 'Peb' 'Pebruari'}
%         month = 2;
%     case {'Mar' 'Maret'}
%         month = 3;
%     case {'Apr' 'April'}
%         month = 4;
%     case {'Mei'}
%         month = 5;
%     case {'Juni'}
%         month = 6;
%     case {'Juli'}
%         month = 7;
%     case {'Aug' 'Augustus'}
%         month = 8;
%     case {'Sep' 'September'}
%         month = 9;
%     case {'Okt' 'Oktober'}
%         month = 10;
%     case {'Nov' 'November'}
%         month = 11;
%     case {'Des' 'Desember'}
%         month = 12;        
% end
            
        

%% Fix Date Column

    % convert data from strings to numeric
Tanggal = Teqs.Day;
Tanggal = str2double(Tanggal);

    % Fill in mising date information, append time
I = find(~isnan(Tanggal));
I = [I; numel(Tanggal)+1];
for n = 1:numel(I)-1, Tanggal(I(n):I(n+1)-1) = Tanggal(I(n)); end;

Teqs.Day = Tanggal;


%% Fix timestamp (Fix HH.MM.SS syntax)
% First remove all '.'s from syntax and convert instances of 'MMSS' to 'HHMMSS'
% If a line is missing the HH, append the previous times HH to the string.

Jam2 = Teqs.TimeStamp;

% remove all '.'s from the syntax. E.g., 'HH.MM.SS' becomes 'HHMMSS'.
% this is for the cases where the observer forgot the proper syntax
Jam2 = strrep(Jam2, '.', ''); 

for j = 1:numel(Jam2)
    
    numchars = numel(Jam2{j});
    if numchars < 6
        
        if j ~= 1;
            appendix = Jam2{j-1}(1:6-numchars);
        else
            zerosstr = '000000';
            appendix = zerosstr(1:6-numchars);
        end
        Jam2{j} = [appendix Jam2{j}];
         
    end

%     if numel(Jam2{j}) < 6; % assume the HH are missing; 6 bc there are 6 chars in 'HHMMSS'
%         
%         if j ~= 1;
%             appendix = Jam2{j-1}(1:2); % append the 'HH' of the previous time
%         else
%             appendix = '00'; % append '00'
%         end
%         Jam2{j} = [appendix Jam2{j}];
%         
%     elseif numel(Jam2{j}) < 4; % assume the 'HHMM' are missing; 4 bc there are 4 chars in 'MMSS'
%         
%         if j~= 1;
%             appendix = Jam2{j-1}(1:4); % append the 'HH.MM.' of the previous time
%         else
%             appendix = '0000.';
%         end
%         Jam2{j} = [appendix Jam2{j}];
%         
%     end

end

Teqs.TimeStamp = Jam2;

%% Create DateNum & Date Strings

% year = 2011; % stub
% month = 5; % stub

Date = Teqs.Day;
Times = Teqs.TimeStamp;

year_vec = repmat(year, size(Date)); month_vec = repmat(month, size(Date)); % create vectors for year and month to match date
date_num = datenum( year_vec, month_vec, Date); % create datenum

for n = 1:numel(date_num)
    
    tmp.datestr = datestr(date_num(n));
    tmp.date_str = [tmp.datestr ' ' Times{n}];
    date_num(n) = datenum(tmp.date_str, 'dd-mmm-yyyy HHMMSS'); % remember, the time syntax has been changed from the original HH.MM.SS to HHMMSS
    date_str{n} = datestr(date_num(n));
    
end

Teqs.Day = date_num;
Teqs.TimeStamp = date_str';

%% Fix earthquake Types


%% Finalize Table

Teqs.Properties.VariableNames{'Day'} = 'DateNumber';
Teqs.Properties.VariableNames{'TimeStamp'} = 'DateString';
Teqs(:, 1) = []; % remove the isEQ variable


%% Clear temporary variables
% clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;

end